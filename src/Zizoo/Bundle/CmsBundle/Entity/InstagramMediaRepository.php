<?php

namespace Zizoo\Bundle\CmsBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Zizoo\Bundle\CmsBundle\Model\InstagramMediaRepositoryInterface;

/**
 * InstagramMediaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InstagramMediaRepository extends EntityRepository implements InstagramMediaRepositoryInterface
{
    const CACHE_TTL = 86400;

    public function save(InstagramMedia $media)
    {
        $em = $this->getEntityManager();
        $em->persist($media);
        $em->flush();
    }


    public function saveBatch(array $medias)
    {
        $em = $this->getEntityManager();
        $i = 0;
        foreach ($medias as $media) {
            $em->persist($media);
            $i += 1;
            if($i >= 20) {
                $i = 0;
                $em->flush();
            }
        }

        $em->flush();
    }


    public function getRecentMedia($pageNumber = null, $itemCount = null)
    {
        $qb = $this->createQueryBuilder('im');
        $this->addPaginationQueryBuilder($qb, $pageNumber, $itemCount);
        return $qb
            ->orderBy('im.createdAt', 'desc')
            ->getQuery()
            ->useResultCache(true, self::CACHE_TTL)
            ->getResult();
    }


    public function getMediaCount()
    {
        return $this->createQueryBuilder('im')
            ->select('COUNT(im.id)')
            ->getQuery()
            ->useResultCache(true, self::CACHE_TTL)
            ->getSingleScalarResult();
    }

    /**
     * @param int               $pageNumber
     * @param int               $itemCount
     * @param QueryBuilder $qb
     */
    protected function addPaginationQueryBuilder(QueryBuilder $qb, $pageNumber = null, $itemCount = null)
    {
        if(isset($itemCount)) {
            $qb->setMaxResults($itemCount);
        }

        $offset = $this->calcPaginationOffset($pageNumber, $itemCount);
        $qb->setFirstResult($offset);
    }


    protected function calcPaginationOffset($pageNumber = null, $itemCount = null)
    {
        $offset = 0;
        if($pageNumber) {
            $offset = $pageNumber * $itemCount;
        }

        return $offset;
    }



}
